name: 'Deployment - Production'

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  initialize-ec2:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Launch EC2 Instance
      id: launch_ec2_instance
      run:
        INSTANCE_ID=$(aws ec2 run-instances \
          --cli-input-json file://instance_specification.json \
          --query 'Instances[0].InstanceId' \
          --output text)
        echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
        echo "::set-output name=instance_id::$INSTANCE_ID"
    
    - name: Wait for EC2 Instance to be running
      id: wait_for_instance
      run:
        INSTANCE_ID=""
        while [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" != "running" ]; do
          echo "Waiting for EC2 Instance to be in 'running' state..."
          sleep 10
          INSTANCE_ID=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].State.Name' \
            --output text)
        done
        echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
        echo "::set-output name=instance_id::${{ env.INSTANCE_ID }}"
    outputs:
      instance_id: ${{ steps.wait_for_instance.outputs.instance_id }}

  producao:
    runs-on: self-hosted
    container:
      image: python:3.12.3
      env:
        ADDRESS: ${{secrets.ADDRESS}}
        PORT: ${{secrets.PORT}}
        USER: ${{secrets.USER}}
        PASSWORD: ${{secrets.PASSWORD}}
        DATABASENAME: ${{secrets.DATABASENAME}}
        INSTANCENUMBER: ${{secrets.INSTANCENUMBER}}
        CURRENTSCHEMA: ${{secrets.CURRENTSCHEMA_PRODUCTION}}
    steps:
      - uses: actions/checkout@v3.5.2
      - name: dependencias
        run:
          pip install hdbcli
      - name: Run Deploymenet
        run:
          python3 execut.py

  notification:
    needs: [producao]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Send mail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{secrets.MAIL_SMTP_ADDRESS}}
          server_port: ${{secrets.MAIL_PORT}}
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: "Novas Funcionalidades e Melhorias no SAP: Versão ${{ steps.get_release.outputs.tag_name }} – Confira as Últimas Atualizações"
          to: ${{vars.MAIL_TO_LIST}}
          bcc: ${{vars.MAIL_TO_LIST_CCO}}
          from: ${{secrets.MAIL_USERNAME}}
          html_body: ${{ steps.get_release.outputs.body }}
          reply_to: ${{secrets.MAIL_USERNAME}}
          convert_markdown: true
          priority: low

  terminate-ec2:
    runs-on: ubuntu-latest
    needs: [initialize-ec2,producao]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Terminate EC2 Instance
      run: |
        INSTANCE_ID=${{ needs.initialize-ec2.outputs.instance_id }}
        aws ec2 terminate-instances --instance-ids $INSTANCE_ID
        echo "Terminated EC2 Instance ID: $INSTANCE_ID"